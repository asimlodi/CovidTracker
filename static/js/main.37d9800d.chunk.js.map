{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","coronaImage","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"kFACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,oBAAoB,SAAW,wBAAwB,UAAY,yBAAyB,OAAS,wB,4NCgDpJC,EA3CD,SAAC,GAAyD,IAAD,IAAtDC,KAAOC,EAA+C,EAA/CA,UAAWC,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,WAClD,OAAIH,EAIA,yBAAKI,UAAWC,IAAOC,WACtB,kBAACC,EAAA,EAAD,CAAMD,WAAS,EAACE,QAAS,EAAGC,QAAQ,UACjC,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAMX,IAAOY,WAC5E,kBAACC,EAAA,EAAD,KACG,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,YACA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAChB,kBAAC,IAAD,CAASC,MAAO,EAAGC,IAAKxB,EAAUyB,MAAOC,SAAU,IAAKC,UAAU,OAElE,kBAACR,EAAA,EAAD,CAAYC,MAAM,iBAAiB,IAAIQ,KAAKzB,GAAY0B,gBAC5D,kBAACV,EAAA,EAAD,CAAYG,QAAQ,SAApB,wCAGF,kBAACf,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAMX,IAAOJ,YAC9E,kBAACiB,EAAA,EAAD,KACG,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,aACA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAChB,kBAAC,IAAD,CAASC,MAAO,EAAGC,IAAKvB,EAAUwB,MAAOC,SAAU,IAAKC,UAAU,OAElE,kBAACR,EAAA,EAAD,CAAYC,MAAM,iBAAiB,IAAIQ,KAAKzB,GAAY0B,gBAC5D,kBAACV,EAAA,EAAD,CAAYG,QAAQ,SAApB,wCAGF,kBAACf,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAMX,IAAOH,SAC9E,kBAACgB,EAAA,EAAD,KACG,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,UACA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAChB,kBAAC,IAAD,CAASC,MAAO,EAAGC,IAAKtB,EAAOuB,MAAOC,SAAU,IAAKC,UAAU,OAE/D,kBAACR,EAAA,EAAD,CAAYC,MAAM,iBAAiB,IAAIQ,KAAKzB,GAAY0B,gBAC5D,kBAACV,EAAA,EAAD,CAAYG,QAAQ,SAApB,2CAhCL,c,yBCNLQ,EAAK,iCAEEC,EAAS,uCAAI,WAAOC,GAAP,2BAAAC,EAAA,6DAClBC,EAAgBJ,EAEjBE,IACCE,EAAa,UAAMJ,EAAN,sBAAuBE,IAJlB,kBAO4CG,IAAMC,IAAIF,GAPtD,2BAOdnC,KAAMC,EAPQ,EAORA,UAAWC,EAPH,EAOGA,UAAWC,EAPd,EAOcA,OAAQC,EAPtB,EAOsBA,WAPtB,kBAWP,CAACH,YAAWC,YAAWC,SAAQC,eAXxB,kCActBkC,QAAQC,IAAR,MAdsB,0DAAJ,sDAkBTC,EAAc,uCAAG,gCAAAN,EAAA,+EAECE,IAAMC,IAAN,UAAaN,EAAb,WAFD,uBAEd/B,EAFc,EAEdA,KAEFyC,EAAezC,EAAK0C,KAAI,SAACC,GAAD,MAAgB,CAE9C1C,UAAW0C,EAAU1C,UAAU2C,MAC/BzC,OAAQwC,EAAUxC,OAAOyC,MACzBC,KAAMF,EAAUG,eARM,kBAUnBL,GAVmB,yFAAH,qDAgBdM,EAAc,uCAAI,8BAAAb,EAAA,+EAEaE,IAAMC,IAAN,UAAaN,EAAb,eAFb,uBAERiB,EAFQ,EAEhBhD,KAAQgD,UAFQ,kBAGlBA,EAAUN,KAAI,SAACT,GAAD,OAAaA,EAAQgB,SAHjB,gCAMvBX,QAAQC,IAAR,MANuB,yDAAJ,qD,yBCoCZW,EApED,SAAC,GAAwD,IAAD,IAArDlD,KAAQC,EAA6C,EAA7CA,UAAWE,EAAkC,EAAlCA,OAAQD,EAA0B,EAA1BA,UAAY+B,EAAc,EAAdA,QAAc,EAChCkB,mBAAS,IADuB,mBAC3DR,EAD2D,KAChDS,EADgD,KAGnEC,qBAAU,YAEK,uCAAG,sBAAAnB,EAAA,kEACVkB,EADU,SACSZ,IADT,6EAAH,qDAIXc,KACF,IAEH,IAAMC,EACHZ,EAAUa,OAEV,kBAAC,OAAD,CACAxD,KAAM,CACFyD,OAAOd,EAAUD,KAAI,qBAAGG,QACxBa,SAAS,CAAC,CACN1D,KAAM2C,EAAUD,KAAI,qBAAGzC,aACvB0D,MAAO,WACPC,YAAa,UACbC,MAAM,GACJ,CACC7D,KAAM2C,EAAUD,KAAI,qBAAGvC,UACvBwD,MAAO,SACPC,YAAa,MACbE,gBAAgB,sBAChBD,MAAM,OAGX,KAETvB,QAAQC,IAAItC,EAAWC,EAAWC,GAEnC,IAAM4D,EACF9D,EAEI,kBAAC,MAAD,CACGD,KAAM,CACMyD,OAAO,CAAC,WAAW,YAAa,UAChCC,SAAS,CAAC,CACNC,MAAM,SACNG,gBAAgB,CACZ,oBACA,oBACA,qBACA9D,KAAK,CAACC,EAAUyB,MAAOxB,EAAUwB,MAAOvB,EAAOuB,UAInEsC,QAAW,CACTC,OAAQ,CAAEC,SAAS,GACnBC,MAAM,CAACD,SAAQ,EAAME,KAAK,oBAAD,OAAqBnC,OAGpD,KAKJ,OACI,yBAAK5B,UAAWC,IAAOC,WACvB0B,EAAU8B,EAAWR,I,mCCzCdc,EArBO,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,oBAA0B,EAECnB,mBAAS,IAFV,mBAExCoB,EAFwC,KAEtBC,EAFsB,KAW/C,OAPAnB,qBAAU,YACQ,uCAAI,sBAAAnB,EAAA,kEAEdsC,EAFc,SAEYzB,IAFZ,6EAAJ,qDAIdO,KACF,CAACkB,IAEC,kBAACC,EAAA,EAAD,CAAapE,UAAWC,IAAOmE,aAC3B,kBAACC,EAAA,EAAD,CAAcC,aAAa,GAAGC,SAAU,SAACC,GAAD,OAAOP,EAAoBO,EAAEC,OAAOpD,SACxE,4BAAQA,MAAM,IAAd,UACX6C,EAAiB7B,KAAI,SAACT,EAAS8C,GAAV,OAAgB,4BAAQC,IAAKD,EAAGrD,MAAOO,GAAUA,S,kCCkB5DgD,E,4MA7BZC,MAAQ,CACJlF,KAAM,GACNiC,QAAS,I,EASZqC,oB,uCAAsB,WAAOrC,GAAP,eAAAC,EAAA,sEACSF,EAAUC,GADnB,OACZkD,EADY,OAElB,EAAKC,SAAS,CAAEpF,KAAMmF,EAAalD,QAASA,IAF1B,2C,wPALSD,I,OAArBmD,E,OAENE,KAAKD,SAAS,CAAEpF,KAAMmF,I,qIAShB,IAAD,EACoBE,KAAKH,MAAtBlF,EADH,EACGA,KAAMiC,EADT,EACSA,QACd,OACI,yBAAK5B,UAAWC,IAAOC,WACnB,yBAAKF,UAAWC,IAAOgF,MAAOC,IAAKC,IAAaC,IAAI,cACrD,kBAAC,EAAD,CAAOzF,KAAOA,IACd,kBAAC,EAAD,CAAesE,oBAAqBe,KAAKf,sBACzC,kBAAC,EAAD,CAAQtE,KAAMA,EAAMiC,QAASA,S,GAzB1ByD,IAAMC,WCLxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U,mBCJjDlG,EAAOC,QAAU,CAAC,UAAY,uBAAuB,MAAQ,qB,mBCA7DD,EAAOC,QAAU,CAAC,UAAY,2B,mBCA9BD,EAAOC,QAAU,CAAC,YAAc,qC,mBCDhCD,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.37d9800d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2jKrr\",\"card\":\"Cards_card__1-EKu\",\"infected\":\"Cards_infected__Ra3G_\",\"recovered\":\"Cards_recovered__3qefX\",\"deaths\":\"Cards_deaths__tvqF7\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid} from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\nimport styles from './Cards.module.css';\r\n\r\nconst  Cards =({ data: {confirmed, recovered, deaths, lastUpdate}}) => {\r\n    if(!confirmed){\r\n    return 'Loading...';\r\n    } \r\n    return (\r\n        <div className={styles.container}>\r\n         <Grid container spacing={3} justify=\"center\">\r\n            <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n             <CardContent>\r\n                <Typography color=\"textSecondary\" gutterBottom>Infected</Typography> \r\n                <Typography variant=\"h5\">\r\n                    <CountUp start={0} end={confirmed.value} duration={2.5} separator=\",\" />\r\n                    </Typography> \r\n                    <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\r\n             </CardContent>\r\n              </Grid>\r\n              <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n             <CardContent>\r\n                <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography> \r\n                <Typography variant=\"h5\">\r\n                    <CountUp start={0} end={recovered.value} duration={2.5} separator=\",\" />\r\n                    </Typography> \r\n                    <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                <Typography variant=\"body2\">Number of recoveries from COVID-19</Typography>\r\n             </CardContent>\r\n              </Grid>\r\n              <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n             <CardContent>\r\n                <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography> \r\n                <Typography variant=\"h5\">\r\n                    <CountUp start={0} end={deaths.value} duration={2.5} separator=\",\" />\r\n                    </Typography> \r\n                    <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                <Typography variant=\"body2\">Number of deaths caused by COVID-19</Typography>\r\n             </CardContent>\r\n              </Grid>\r\n         </Grid>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url ='https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData =  async (country) => {\r\n    let changeableUrl = url;\r\n\r\n    if(country){\r\n        changeableUrl = `${url}/countries/${country}`\r\n    }\r\ntry {\r\n    const { data:{confirmed, recovered, deaths, lastUpdate} } = await axios.get(changeableUrl);\r\n\r\n   // const modifiedData = { confirmed, recovered,deaths,lastUpdate}\r\n\r\n            return {confirmed, recovered, deaths, lastUpdate };\r\n\r\n} catch (error) {\r\n    console.log(error);\r\n}\r\n}\r\n\r\nexport const fetchDailyData = async ()=>{\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`);\r\n\r\n        const modifiedData = data.map((dailyData) => ({\r\n\r\n        confirmed: dailyData.confirmed.total,\r\n        deaths: dailyData.deaths.total,\r\n        date: dailyData.reportDate,\r\n    }))\r\n    return modifiedData;\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\n\r\nexport const fetchCountries  = async  () => {\r\n    try {\r\n        const {data: { countries }} = await axios.get(`${url}/countries`);\r\n      return countries.map((country) => country.name);\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}","import React, { useState, useEffect} from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport { Line, Bar} from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst  Chart =({ data: { confirmed, deaths, recovered}, country }) => {\r\n    const [dailyData, setDailyData] = useState({});\r\n\r\n   useEffect(() => {\r\n\r\n   const  fetchAPI = async () => {\r\n           setDailyData(await fetchDailyData());\r\n       }\r\n\r\n       fetchAPI();\r\n   },[]); \r\n\r\n  const lineChart = (\r\n     dailyData.length\r\n    ? (\r\n     <Line\r\n     data={{\r\n         labels:dailyData.map(({ date}) => date),\r\n         datasets:[{\r\n             data: dailyData.map(({ confirmed}) => confirmed),\r\n             label: 'Infected',\r\n             borderColor: '#3333ff',\r\n             fill: true,\r\n             },{\r\n                data: dailyData.map(({ deaths}) => deaths),\r\n                label: 'Deaths',\r\n                borderColor: 'red',\r\n                backgroundColor:'rgba(255, 0, 0,0.5)',\r\n                fill: true,\r\n             }],\r\n     }}\r\n      />): null\r\n  );\r\n  console.log(confirmed, recovered, deaths);\r\n\r\n const barChart = (\r\n     confirmed\r\n     ?(\r\n         <Bar \r\n            data={{\r\n                        labels:['Infected','Recovered', 'Deaths'],\r\n                        datasets:[{\r\n                            label:'People',\r\n                            backgroundColor:[\r\n                                'rgba(0,0,255,0.5)',\r\n                                'rgba(0,255,0,0.5)',\r\n                                'rgba(255,0,0,0.5)'],\r\n                                data:[confirmed.value, recovered.value, deaths.value]\r\n                            \r\n                        }]\r\n            }}\r\n            options = {{\r\n              legend: { display: false },\r\n              title:{display:true, text:`Current state in ${country}`},\r\n            }}\r\n            />\r\n     ): null\r\n );\r\n \r\n\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n       {country ? barChart : lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;","import React,{useState, useEffect} from 'react';\r\nimport { NativeSelect, FormControl} from '@material-ui/core';\r\n\r\nimport styles from './CountryPicker.module.css';\r\nimport { fetchCountries } from '../../api';\r\n\r\n\r\nconst  CountryPicker =({ handleCountryChange }) => {\r\n\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI  = async () => {\r\n\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n        fetchAPI();\r\n    },[setFetchedCountries]);\r\n    return (\r\n        <FormControl className={styles.FormControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n                <option value=\"\">Global</option>\r\n    {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","import React from 'react';\r\n//import Cards from './components/Cards/Cards';\r\n//import Chart from './components/Chart/Chart';\r\n//import CountryPicker from './components/CountryPicker/CountryPicker';\r\n\r\nimport { Cards, Chart, CountryPicker } from './components';\r\nimport styles from './App.module.css';\r\nimport { fetchData } from './api';\r\nimport coronaImage from './images/image.png';\r\n\r\nclass App extends React.Component {\r\n   state = {\r\n       data :{},\r\n       country: '',\r\n   }\r\n   \r\n     async componentDidMount() {\r\n        const fetchedData  = await fetchData();\r\n\r\n        this.setState({ data: fetchedData});\r\n    }\r\n\r\n    handleCountryChange = async (country) => {\r\n        const fetchedData  = await fetchData(country);\r\n        this.setState({ data: fetchedData, country: country});\r\n       // fetch the data \r\n       //set the data\r\n    }\r\n    render() {\r\n        const { data, country } =this.state;\r\n        return (\r\n            <div className={styles.container}>\r\n                <img className={styles.image} src={coronaImage} alt=\" COVID-19\"/>  \r\n               <Cards data ={data} />\r\n               <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n               <Chart  data={data} country={country}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__xnqDT\",\"image\":\"App_image__1S-GL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1LG55\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__1LxOm\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}